#    SPDX-FileCopyrightText: 2021 Monaco F. J. <monaco@usp.br>
#    SPDX-FileCopyrightText: 2024 Beatriz Cardoso de Oliveira <beatrizco@usp.br>
Heitor Tanoue de Mello <heitortanoue@usp.br>
#   
#    SPDX-License-Identifier: GPL-3.0-or-later
#
#  This file is a derivative work from SYSeg (https://gitlab.com/monaco/syseg)
#  and contains modifications carried out by the following author(s):
#  Beatriz Cardoso de Oliveira <beatrizco@usp.br>
Heitor Tanoue de Mello <heitortanoue@usp.br>

 myDOS -  myDOS
 ==============================

 This programming exercise consists of extending the example tyDOS, provided
 under the directory 'eg/tydos'. The source code illustrates a DOS-like
 program that runs in x86 real-mode. TyDOS already implements a trivial
 command-line interpreter that can execute built-in functions.

 The present challenge is to improve the interpreter such that, if the user
 enters the name of an executable file, the interpreter searches for the file
 in the storage media from which the kernel was booted, loads it, and executes
 it to completion (returning thus the prompt of the command-line interpreter).

 The example also implements a syscall handler, which the user program can
 invoke to request OS services. Rather than issuing the syscall directly,
 though, the programmer can take advantage of a small custom user library that
 should then be linked against the executable.
 
 For the purpose of illustration, the project comes with a user program example
 that is statically linked to the kernel, such that it is automatically loaded
 by the bootloader. We want to extend the example to load the program, given its
 name, from a formatted storage media --- what implies implementing support for
 the media's file system.

 To help with this, the example tyFS, found in 'eg/tyfs' introduces a trivial
 file system that should be very easy to understand and implement.

 The programming exercise can thus be summarizing as adding the support for tyFS
 to the kernel, and extending the command-line interpreter to locate a file
 by name, load and execute it.

 Directions
 ------------------------------

 This directory contains a copy of TyDOS source code.

 Proceed as indicated in the 'Directions for the exercise' section, further
 ahead, to export the code example into your own project. After that,
 follow the steps below (you'll have to export this directory into your
 own project tree).

 1) Play with tyDOS and tyFS.

    Visit both examples, read the documentation, build and execute some
    experiments to get acquainted with them. 

 2) Build and execute myDOS in this directory.

   make
   make mydos.bin/run

   Try the command 'help' and follow the instructions.

 3) Please, chose an original name for your project.

    Yeah... that. You know, it's a programmer's duty to honor their projects
    with a distinctive name. Do not fail with the venerable traditions.

    At least edit the greeting messages (e.g. the prompt) and, preferably, the
    logo accordingly. You can also edit the variable 'dos' in the 'Makefile'
    and rename source files to match the changes.

 4) Remove the statically linked program.

    Figure out how to edit 'Makefile', 'kernel.c' and 'tydos.ld' such that
    'prog.bin' is not statically linked to 'mydos.ld' (or whatever name you
    have gave to your DOS).

 5) Create a tyfs disk image.

    Add a rule in your 'Makefile' to create a zeroed 1.44M floppy image
    'disk.img' (see 'img' rule in 'eg/tyfs/Makefile).

    Use 'tyfsedit' in 'eg/tyfs' to format it with tyFS, and copy some
    text files into it.

 6) Make the disk image boot your DOS program.

    Add a rule to your 'Makefile' to write 'mydos.bin' into 'disk.img'.
    Remember that you should not overwrite the tyFS header in the disk,
    or else you'll corrupt the file system (see the option 'skip'
    of the utility 'dd'). Also, mind that you must have formatted your
    media with sufficient boot sectors to accommodate your DOS.

 7) Boot your DOS from the disk image.

    Try it with QEMU x86 emulator.

       make mydos.bin/run

    should do it (replace 'mydos' with your DOS name).

 8) Implement a built-in command that lists the contents of the disk.

    Study the source code of 'tyfsedit' and figure out how to implement
    the functionality into your kernel.

    Remember that the FS header is already in RAM (it was loaded by BIOS
    during the boot). You can easily access it using plain C.

    In the header you have all the information to locate the directory
    region. You can then load it (using the BIOS disk service.) into RAM
    and go through and the file names, again, in plain C.
    
 9) Create a loadable user program out of prog.c.

    In tyDOS example, 'prog.o' was directly linked into the kernel and
    we could execute it simply by calling it's 'main' function. That was
    possible because, when 'tydos.bin' was built, the linker could resolve
    the symbol 'main'.

    Now, 'main' is in the user program, and the link-editor does not know
    anything about 'prog' at the time 'mydos.bin' is built.  Try to figure
    out how to handle this new scenario before reading on.

    Ok, that's how OSes do it.

    First, notice that the binary 'prog.bin' is missing the old'n good
    runtime initializer. The tip is: create a file crt0.S where you
    define the symbol '_start' as the very first function and, from there,
    call 'main'. Then, modify 'prog.ld' so that 'crt0.S' is prepended
    to 'prob.bin' (you'll need to update 'Makefile' accordingly).
    
    Since '_start' is guaranteedly the start of 'prob.bin' code, and
    since you know where the kernel has loaded the program, you can
    make a "virtual" call to _start by pushing the return address
    onto the stack and jumping to the program load address; the return
    from main will happily find the address and pop it.

    Note: how to get the return address to push it onto the stack is not
    necessarily obviously. On x86 real mode (and even in 32-bit for that
    matter), you can't read the value of the instruction pointer register
    to know where is the address of the next instruction. The trick, here
    is to call an auxiliary function whose only purpose is to "discover"
    the current execution address. For instance

        (asm code...)
	call get_ip_into_ax  
	(push the return address and jmp to main)
	

      get_ip_into_ax:
        mov (%sp), %ax		# Load %ax with the return address
	ret

    The function 'get_ip_into_ax' is called often called a thunk function.

 10) Implement a new syscall and call it from a new library function.

   Finally, to end with all honor and glory, add a new syscall to your kernel
   that reads the user input from the keryboard. The kernel already has this
   capability and you can reuse it to implement the syscall. See 'bios2.S'
   and 'syscall.c' to see how this is done for 'sys_write'.

   Then, increment the user library 'libtydos.a' by implementing the
   user function

   	void gets(char *buffer)

   that reads the user input and stores it into 'buffer'.

   Now, create a new program 'hello.c' that uses both 'puts' and 'gets' to
   read the user name and print the string "Hello <name>".

   Build, 'hello.bin', copy it into 'disk.img' using 'tyfsedit', boot it with
   the emulator, and execute it from your DOS command-line interpreter.

   Lastly, edit your 'Makefile' to build 'hello.bin'.

   Get a USB stick, copy the disk image into it, and then try to boot and
   run your DOS in the real x86 hardware.

   If you've made it this far, now stop. Rest your hands, take a deep breath.
   Slide your chair away from the desk, lean back, half-close your eyes, and,
   contemplating your creation, acknowledge to yourself: 'Damn, Iâ€™m good.'

 
 Directions for the exercise
 ------------------------------

 1) Create your project.

 Unless otherwise specified by your instructor (in case you are using this
 material as part of a trainning program), SYSeg suggests that you deliver the
 solution of your implementation challange by commiting your work into a Git
 repository.

 If you haven't aready done it yet, please go through the following steps;
 otherwise, skip this part and proceed directly to item (2).
 
 Create your remote mainstream repository as indicated by the instructor and
 git-clone it into your local development environment.

 If your repository name is, say, 'proj', then, to bootstrap your project, run
 this command at the shell prompt:
 
    $ <path-to-syseg>/tools/syseg-project <path-to-proj>

 Well done, your project directory should be now populated with some essential
 data files and auxiliary scripts that you should use to develop the
 implementation challange.

 Read the newly created 'README' file and proceed as indicated.

 2) Export the exercise files into your project directory.

 Say the exercise is in a directory named 'foo', under the SYSeg source tree.

 Within directory 'foo', execute the command:

    $ make export             

 The command should create a tarball containing the project files.

 Uncompress the tarball contents into your project directory:

    $ tar zxvf foo.tgz -C <path-to-proj> 
 
 That will create a directory '<path-to-proj>/foo'.

 Note: if you are ever requested to update the exercise files --- say, because
 your instructor has changed anything --- you can git-push SYSeg to fetch the
 latest changes, make-export your exercise, and uncompress it again into your
 project directory using the command

    $ tar zxvfk foo.tgz -C <path-to-proj>

 (Note the 'k' option that prevents tar from overwriting existing files.)

 To complete the programming exercise, proceed as indicated in both this file
 and the complementary comments in the exercise source code.

 **Attention** do not simply copy the SYSeg files to your project.
 
     Some programs, build scrips, configuration files etc. may be
     heavily dependent on other parts of SYSeg and have not being
     designed to work properly if not in conjunction with those
     other files. If you merely copy files, they may well be incomplete.
     The syseg-export program should be used to export the SYSeg code
     into a standalone bundle. The 'make export' rule will collect the
     required files, and possibly modify them as needed to work outside
     the SYSeg project tree. Moreover, syseg-export will also modify
     the copyright notices in the form suitable for a derivative work.

  Should you intend to reuse any other file from SYSeg, please use the command

     $ <path-to-syseg>/tools/syseg-export <input-file> <destination-directory>

  The scritpt will export SYSeg files in a format suitable to be reused by
  external projects.

 3) Develop the implementation challenge.

 Start by reading '<path-to-proj>/.tools/readme.md', which will walk you
 through the steps to develop the program exercise.

 It's very important that you follow the directions given in that guide, should
 you or your instructor expect to use the SYSeg automatic test and verification
 tools to evaluate your implementation.

 SYSeg provides scripts for creating new source files, export code from SYSeg
 to your project, handle copyright information and other tasks.

 Finally, deliver your project as instructed.

 Within the exercise directory you should find a file named  'SOLVING' or
 'NOTEBOOKÂ´, which you should use as a  laboratory notebook for you to explain
 how you solved the implementation challenge, including annotations about the
 results, limitations and difficulties you may have found.



 How to deliver the exercise
 ------------------------------
  
 If you're exploring the exercise as part of a training program, chances are
 that your instructor is following the delivery workflow suggested by SYSeg. If
 that is the case, then, when you're done with the activity, you should be
 asked to upload your work into a repository managed by a version-control
 system (VCS) --- most probably Git.

 For this purpose, you must have already created your online repository in the
 recommended platform (e.g. GitHub or GitLab), cloned it, and then copied the
 exercise files into the directory of your project using the proper helper
 scripts provided by SYSeg.
 
 To deliver your programming exercise just commit your changes and push them
 into to the mainstream repository.
 

 You may commit partial changes even before completing the exercise. That may
 be a convenient way to share ideas and ask for help. Opening an issue in the
 repository with your question may be an effective way to ask for help.
 

 When you believe your work is complete, mark your final revision with a
 tag. Unless the exercise specification informs differently, use the tag
 '<dir>-done', where '<dir>' is the name of the directory containing the
 project. If you need to submit a revision after that, use the
 tag '<dir>-rev1', '<dir>-rev2' and so on.
 
 To tag your delivery:

     $ git tag <dir>-done
     $ git push origin <dir>-done

 The instructor will know you are finished with the exercise.

 Note: please, commit only source files, i.e. don't commit object files and
 other items that can be generated by the build process).
  


    

 

 Bintools: convenience rules for inspecting binary files
 ------------------------------------------------------------
 
 SYSeg's Bintools is a collection of Makefile rules aimed as shortcut for
 invoking binary inspection utilities. It contains handy Make rules for
 disassembling objects, comparing files, creating bootable images, invoking
 platform emulators and other facilities. Some shortcuts are ad hoc rules
 crafted under poetic license and may depart from conventional Make usage.

 CONVENTIONS
 
 As a rule of thumb, a file named

     foo.bar            contains the working implementation
     foo-beta.bar	contains working but cumbersome/inelegant implementation
     foo-alpha.bar	contains incomplete or wrong implementation

 File extensions:

   -`hex`  ASCII file containing values in hexadecimal representation;

   -`asm`  manually written assembly code in Intel ASM format;

   -`S`    manually written assembly code in AT&T Gas format;

   -`s`    assembly code in AT&T Gas format generated by the compiler (gcc);

   -`o`    object code produced by the assembler;

   -`i`    pre-processed source code generated by the pre-processor (CPP)

   -`bin`  flat-binary file generated by the linker;

   -`iso`  ISO9660 (ECMA-119) file system intended for optical disk media (CD) 

   -`ld`   linker script (ld).


 Some examples allow alternative build recipes which can be selected
 by passing the command-line variable 'ALT=<number>' to 'make'. See bellow.

 NEEDED SOFTWARE

 In order to experiment with the examples in this section, the following
 pieces of software may be needed. The list indicates the lowest versions
 against which the project has been tested. Using a more recent version should
 be ok, but it is not absolutely guaranteed that results won't exhibit minor
 variations. Feedback is always appreciated.

 If required for a particular example, it is safe to use

 - Linux         5.13.0         (any decent ditribution)
 - gcc 	     	 9.3.0	        (the GNU compiler)
 - GNU binutils  2.34		(GNU assembler, linker, disassembler etc.) 
 - nasm		 2.14.02	(NASM assembler)
 - qemu		 4.2.1		(most probably qemu-system-i386)
 - gcc-multilib  9.3.0		(to compile 32-bit code in a 64-bit platform)
 - xorriso	 1.5.2-1	(depending on your computer's BIOS)
 - hexdump	 POSIX.2	(binary editor)
 
 CONVENIENCE RULES 


 * For building and inspecting binaries, use

   make					     Build the default target.

   make foo				     Build foo.

   make diss IMG=foo 			     Disassemble foo.

   	     	     			     Optionally,

					        ASM  = intel | att  (default)
						BIT  =    16 | 32   (default)

   make dump IMG=foo			     Show the raw contents of foo.
   
   make      			             Build everything (or make all)

   make clean			             Undo make all

   make diff foo bar baz		     Show graphical diff between files

   	     	     			     ASM and BIT variables apply


  * If any example involves the manipulation of a bootable image, use
  

   make run IMG=foo	             	     Run foo in the emulator

   make stick IMG=foo DEVICE=/dev/sdX        make a bootable USB stick


   SHORTCUTS

   For further convenience, the build script offers some ad hoc shortcuts:
   

   make foo/diss | foo/d		     disassemble .text as 32-bit AT&T

   make foo/diss intel|att		     disassemble as 32-bit Intel or AT&T
   make foo/diss 16|32			     disassemble as 16-bit or 32-bit
   make foo/diss intel|att 16|32	     disassemble as Intel|AT&T 16|32 bit
   make foo/diss 16|32 intel|att	     disassemble as Intel|AT&T 16|32 bit

   make foo/i16	       			     disassemble as Intel 16-bit
   make foo/a16 | foo/16  		     disassemble as AT&T  16-bit
   make foo/a32	| foo/32 | foo/a     	     disassemble as AT&T  32-bit
   make foo/i32	         | foo/i	     disassemble as Intel 32-bit

   		   			     In all disassembly rules, a
					     trailing '*' means disassemble all
					     sections, e.g. foo/d* foo/16* ...

   make foo/hex | foo/raw | foo/dump	     show raw contents in hexadecimal

   make foo/run				     test foo (mbr) with the emulator
   make foo/fd				     test foo (floppy) with the emulator

   make diffi16 | di16 | i16 foo bar baz     make diff with ASM=intel BIT=16
   make diffi32 | di32 | i32 foo bar baz     make diff with ASM=intel BIT=32
   make diffa16 | da16 | a16 foo bar baz     make diff with ASM=att BIT=16
   make diffa32 | da32 | a32 foo bar baz     make diff with ASM=att BIT=32

   make foo/stick dev    	   	     make stick IMG=foo DEVICE=dev

   make foo/l	  			     open foo in 'less' program

 

